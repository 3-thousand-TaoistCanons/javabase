package com.weimob.mengdian.hermes.thread;

import com.weimob.mengdian.hermes.model.response.finance.BillList;
import com.weimob.mengdian.hermes.model.response.finance.MakesBillIn;
import com.weimob.mengdian.hermes.proxy.OrderServiceProxy;
import com.weimob.mengdian.hermes.util.exception.HermesErrorCode;
import com.weimob.mengdian.hermes.util.exception.HermesException;
import com.weimob.mengdian.soa.utils.SpringBeanUtils;
import org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;

import java.util.concurrent.Callable;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.Future;

/**
 * 异步获取流水账单
 *
 * @author: kevin
 * @date 2016/3/23.
 */
public class BillListDataThread {
    private static ThreadPoolTaskExecutor taskExecutor;
    private Future<BillList> dataFuture;//批量taskId查询
    private int pageSize = 10;//查询财富接口时需要传入每次查询记录数，默认10

    static {
        taskExecutor = (ThreadPoolTaskExecutor) SpringBeanUtils.getBean("taskExecutor");
    }

    /**
     * 可以传递任意个数参数
     *
     * @param billIns
     */
    public BillListDataThread(MakesBillIn billIns) {
        if (null != billIns) {
            billIns.setPageSize(pageSize);
            billIns.setBizType(9);//分享赚类型
            BillDataThread billDataThread = new BillDataThread(billIns);
            dataFuture = taskExecutor.getThreadPoolExecutor().submit(billDataThread);
        }
    }


    public BillList getBillList() throws ExecutionException, InterruptedException {
        if (dataFuture == null) {
            return null;
        }
        if (dataFuture != null) {
            return dataFuture.get();
        }
        throw new HermesException(HermesErrorCode.GET_BILL_INFO_ERROR);
    }


    private class BillDataThread implements Callable<BillList> {
        private OrderServiceProxy orderServiceProxy;
        private MakesBillIn billIn;

        public BillDataThread(MakesBillIn billIn) {
            this.billIn = billIn;
            Object orderServiceObj = SpringBeanUtils.getBean("orderService");
            try {
                orderServiceProxy = (OrderServiceProxy) orderServiceObj;
            } catch (ClassCastException | NullPointerException e) {
                throw new HermesException(HermesErrorCode.GET_BILL_INFO_ERROR);
            }
        }

        @Override
        public BillList call() throws Exception {
            return orderServiceProxy.sharingMakesBillsList(billIn);
        }
    }
}
